:Backend notes
	- Created auth namespace which will handle authorizing data before it goes into the application
	- auth/validate-login-credentials validates that the supplied username and password is valid according to timelord specs
	- updated check-user-form to validate-login-credentials to better describe what the function is actually doing
	- auth/validate-login-credentials still needs to report errors back to web_build so that the error messages can be relayed to the users



:Frontend notes
	- Made significant formatting updates to code base now that I have Cursive
	- Completely re-worked the check username process
		- Now sends the username and password to timelord_db.timelord_auth. Auth is going to be where all of the cleaning of Data happens before going to the DB



:Database notes
	created general schema for database tables as such:

{:users
	a_Userkey
	a_UserName
	a_Password
	a_Points
	a_Rank}

{:Transactions
	t_TransactionKey
	a_UserName_SK_FK
	t_Amount
	t_DateTime
	t_ResultingBalance
	t_Description
	n_Note_SK_FK}

{:Notes
	n_NoteKey_SK
	a_UserName_SK_FK
	n_DateTime
	n_TotalMinutes
	n_StartTime
	n_EndTime
	n_Contact
	n_Problem
	n_Environement
	n_Actions
	n_NextSteps}

{:Chat
	c_ChatKey_SK
	a_UserName_SK_FK
	c_Recipient
	c_MessageContents}



:General
	- investigated logging
	- Have read good arguments for creating a simple logging interface to send the appropriate information over to a logging/graphic interface
	- Could use log4j or LogBack regarding these errors, but I really like the idea of creating a logger that will just spit out the information that I need and could interact with Reimann or another interface at some point
	- Created a testing logging interface
	- Easy way for logging is just to create functions that attach additional parameters to the log response
	- Installed LogBack as a logging engine, will still try to figure out the defprotocol and defrecord deal. It is still over my head :).

	Logging Event structure (Riemann)
	{:host		 host
	 :service	 current-function
	 :severity	 info, warning, etc
	 :time		 Current Time Stamp
	 :description	 "Description of the log event"
	 :tags		 list of strings, helps to filter log, ex [http, update, etc
	 :metric	 integer associated with event
	 :ttl		 Time To Live for the event}
