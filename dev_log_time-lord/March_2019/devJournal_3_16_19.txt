:Backend notes

- Backend jobs should be as follows:

	- Receive query requests from front
	- Pass query requests to DB interface
	- Return Database results to front End
	- Return query errors to front
	- Check that form information is error-free
	- recieve form data from frontend

- Created app project backend-web-interface-clojure
- renamed core.clj to master.clj
- backend is going to be priority in this case, it will be effectively what tells the other processes what to do



:Frontend notes

- Frontend jobs should be:
	- Answer HTTP Requests with the right html page
	- Send information back out to the User
	- Send form data to Back-end interface
	- parse form data, converting to a format that clojure can work with (map/transit)
	- Front may also be the only thing that is actually interacting with NginX

- Nginx-clojure interfaces with this
- This also should build and serve static/dynamic pages?
- Front-end needs to be able to listen on a port that Javascript can hand the form off to

- Created app project frontend-web-interface-clojure for the frontend processor
- Renamed core.clj to supplier.clj as this is will be largely supplying information to other interfaces


:Database notes

- Created database-web-interface-clojure
- renamed core.clj to query_service.clj

:General


- Clojure web server needs to communicate between front/backend. 
- instead of doing a static port, it makes more sense to use a (rand 55000) or something, and make each interface use the same output function. This s
hould make it so that front/back are always talking on the same port, but it doesn't need to be a static port. A Shared function for that would be use
ful so that if I wanted to restrict ports later, I could.
- Ring, compojure, and hiccup are likely to be involved in this
- Hiccup is what I can use to create dynamic http pages
- Compojure handles routing, which I'm not sure what that or Ring is supposed to be used for yet
- Transit can be used to communicate the form data I believe

